#!/usr/bin/env bash

. <(functions at ...)

declare -Agr language_by_ext=(
	[c]=c
	[cpp]=cpp
	[cs]=csharp
	[go]=go
	[java]=java
	[js]=javascript
	[py]=python
	[rb]=ruby
	[rs]=rust
	[sh]=bash
	[ts]=typescript
	[zig]=zig
)

declare -Agr language_by_meta=(
	['build.zig']=zig
	['Cargo.toml']=rust
	['Gemfile']=ruby
	['go.mod']=go
	['package.json']=javascript
	['pom.xml']=java
	['requirements.txt Pipfile']=python
)

detect() {
	local name=${PWD##*/}

	local entry

	for entry in "$name".*; do
		local ext=${entry##*.}

		if [[ -n ${language_by_ext[$ext]:-} ]]; then
			work[entry]=$entry
			work[language]=${language_by_ext[$ext]}
			break
		fi
	done

	if [[ -z ${work[language]:-} ]]; then
		local key
		for key in "${!language_by_meta[@]}"; do
			for file in $key; do
				if [[ -f $file ]]; then
					work[language]=${language_by_meta["$key"]}
					break
				fi
			done
		done
	fi

	if [[ -z ${work[language]:-} ]]; then
		local maybe=()

		local file
		for file in *.*; do
			local ext=${file##*.}

			if [[ -n ${language_by_ext[$ext]:-} ]]; then
				entry=$file
				maybe+=("$ext")
			fi
		done

		if [[ ${#maybe[@]} -eq 1 ]]; then
			work[language]=${language_by_ext[${maybe[0]}]}
			work[entry]=$entry
		fi
	fi

	[[ -n ${work[language]:-} ]] || fail- 'Language not detected'
}

DEFAULT_PLAY_TIMEOUT=15 # seconds

timeout() {
	if [[ ${PROCEDURE_PLAY_TIMEOUT:-} = 0 ]] || [[ $(ulimit -t 2>/dev/null || true) != unlimited ]]; then
		return 0
	fi

	local timeout=${PROCEDURE_PLAY_TIMEOUT:-$DEFAULT_PLAY_TIMEOUT}

	{ ulimit -S -t "$timeout" && ulimit -H -t "$((timeout + 1))"; } &>/dev/null || true
}

# --- Configuration

# shellcheck disable=2034
declare -Ag work=(
	[language]=''
	[entry]=''
)

# --- Main

# TODO: Refactor command routing after the "Lets" API stabilized

route() {
	local command=${1?${FUNCNAME[0]}: missing argument}; shift

	local external="${program[name]}"-"$command"

	if available "$external"; then
		builtin exec "$external" "$@"
	fi

	[[ -n ${commands_by_desc[$command]:-} ]] || abort "No such command: $command"

	local exec

	for exec in .local/bin/"$command" .local/libexec/"$command"; do
		if [[ -x $exec ]]; then
			builtin exec "$exec" "$@"
		fi
	done

	[[ -z ${commands_by_renew[$command]:-} ]] || renew
	! [[ $command = play ]] || timeout

	if [[ -n ${work[entry]:-} ]]; then
		procedure- "${work[language]}-/${command}" "${work[entry]}" "$@"
	else
		procedure- "${work[language]}/${command}" "$@"
	fi
}

renew() {
	if [[ -n ${program[offline]:-} ]]; then
		info "No renew when offline"
		return 0
	fi

	assert.privilege
	self.renew
}

# shellcheck disable=2120
usage() {
	local format="\t%-24s  %s\n"

	echo "Usage: ${program[name]} [-verbose|-offline|-online] command [args...]"
	echo

	# shellcheck disable=2059
	if [[ $# -eq 0 ]]; then
		local command

		for command in "${!commands_by_desc[@]}"; do
			local help=${commands_by_desc[$command]:-}
			printf "$format" "$command" "$help"
		done | sort >&2
	else
		local command=$1

		[[ -n ${commands_by_desc[$command]:-} ]] || abort "No such command: $command"

		printf "$format" "$command" "${commands_by_desc[$command]:-}"
	fi
}

usage-() {
	[[ $# -eq 0 ]] || warn "$@"

	usage
	exit 1
}

# --- Entry

declare -Ag program=(
	[name]=${0##*/}
	[branch]=''
	[offline]=''
)

declare -Agr commands_by_desc=(
	[help]='Display help'
	[lint]='Lint work'
	[okay]='Check work'
	[play]='Play work'
)

declare -Agr commands_by_renew=(
	[lint]=''
	[okay]=''
	[play]=''
)

main() {
	while [[ $# -gt 0 ]]; do
		case $1 in
		--)
			shift
			break
			;;
		-offline)
			program[offline]=true
			;;
		-online)
			program[offline]=''
			;;
		-verbose)
			export VERBOSE=true
			;;
		-*)
			usage- "Unrecognized flag: $1"
			;;
		*)
			break
			;;
		esac

		shift
	done

	[[ $# -gt 0 ]] || usage-

	local command=$1
	shift

	if [[ $command == help ]]; then
		usage "$@"
		return 0
	fi

	detect && route "$command" "$@"
}

main "$@"
